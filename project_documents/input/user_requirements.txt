متطلبات مشروع: بناء موقع ويب تعليمي وإداري متكامل مع LLM
اسم المشروع المقترح: "منصة التعلّم الذكي EduSpark" (أو أي اسم آخر تختاره)
1. الهدف العام للمشروع:
بناء موقع ويب متكامل يخدم هدفين رئيسيين:
التعليم المباشر للطلاب: توفير تجربة تعليمية تفاعلية مدعومة بنماذج لغوية كبيرة (LLMs).
الإدارة الفعالة: توفير لوحة تحكم للمسؤولين لإدارة المحتوى، المستخدمين، وتفاعلات LLM.
2. التقنيات الأساسية المقترحة (للتوثيق في README.md):
الواجهة الأمامية: Next.js (React)
الواجهة الخلفية: Next.js API Routes
قاعدة البيانات ORM: Prisma
قاعدة البيانات: PostgreSQL
النماذج اللغوية الكبيرة (LLM): مبدئيًا OpenAI API (GPT-3.5/GPT-4)، مع إمكانية التوسع.
المصادقة: NextAuth.js
التصميم/الـ UI: Tailwind CSS
3. الميزات الرئيسية المطلوبة (سيتم تفصيلها كمهام في README.md):
أ. بوابة الطالب (Student Portal):
    1.  نظام المصادقة والتسجيل:
        *   تسجيل مستخدم جديد (اسم، بريد إلكتروني، كلمة مرور).
        *   تسجيل الدخول.
        *   استعادة كلمة المرور.
        *   تسجيل الدخول عبر Google (اختياري مبدئيًا).
    2.  عرض الدورات التعليمية:
        *   صفحة رئيسية تعرض قائمة بالدورات المتاحة (بطاقات دورات).
        *   صفحة تفاصيل الدورة (وصف، محتوى الدورة/الدروس، متطلبات).
    3.  عرض محتوى الدرس:
        *   عرض النصوص، الصور، الفيديوهات المضمنة (إن وجدت).
    4.  تفاعل LLM للطلاب:
        *   مساعد ذكي (Q&A): واجهة دردشة لطرح الأسئلة المتعلقة بمحتوى الدورة/الدرس والحصول على إجابات من LLM. (يجب أن يكون LLM على دراية بسياق الدرس الحالي).
        *   أداة تلخيص النصوص: قدرة على تحديد نص من الدرس وطلب تلخيص من LLM.
        *   مساعد كتابة (اختياري مبدئيًا): مساعدة الطلاب في صياغة إجابات أو مقالات قصيرة.
    5.  تمارين واختبارات (مبسطة مبدئيًا):
        *   أسئلة اختيار من متعدد أو صح/خطأ.
        *   LLM يمكن أن يساعد في توليد بعض الأسئلة أو تقديم تغذية راجعة على الإجابات النصية.
    6.  تتبع التقدم:
        *   عرض الدروس المكتملة.
        *   علامات بسيطة على إكمال الوحدات/الدورات.

ب. لوحة التحكم الإدارية (Admin Panel):
    1.  نظام مصادقة للمسؤولين: منفصل أو باستخدام أدوار على نظام المستخدمين.
    2.  إدارة المستخدمين:
        *   عرض قائمة المستخدمين.
        *   تعديل بيانات المستخدمين (تفعيل/تعطيل، تغيير الدور).
        *   (الحذف بحذر).
    3.  إدارة المحتوى التعليمي (CRUD):
        *   إنشاء/تعديل/حذف الدورات.
        *   إنشاء/تعديل/حذف الدروس داخل الدورات (محرر نصوص غني بسيط).
        *   إدارة مواد الدرس (رفع صور، تضمين روابط فيديو).
    4.  إدارة تكوين LLM (مبسط):
        *   إدخال مفتاح API للـ LLM.
        *   (اختياري متقدم) تعديل بعض الأوامر (Prompts) الأساسية المستخدمة في تفاعلات الطلاب.
    5.  عرض سجلات تفاعل LLM (اختياري مبدئيًا):
        *   عرض سجل بالأسئلة التي طرحها الطلاب وإجابات LLM (للتحليل والتحسين).
    6.  تحليلات بسيطة (اختياري مبدئيًا):
        *   عدد المستخدمين المسجلين.
        *   عدد الدورات المنشورة.
4. هيكل قاعدة البيانات الأولي المقترح (لتوجيه تصميم مخطط Prisma):
* User (id, name, email, password, role (STUDENT, ADMIN), createdAt, updatedAt)
* Course (id, title, description, published, authorId (User), createdAt, updatedAt)
* Lesson (id, title, content (JSON أو Text), courseId (Course), order, createdAt, updatedAt)
* Enrollment (userId, courseId, enrolledAt, progress) - لربط الطلاب بالدورات
* LLMInteractionLog (id, userId, prompt, response, lessonId (optional), timestamp, cost (optional))
* (يمكن إضافة المزيد مثل Quiz, Question, Answer لاحقًا)
5. تصميم API الأولي المقترح (لتوجيه إنشاء Next.js API Routes):
* Auth: /api/auth/* (مُدار بواسطة NextAuth.js)
* Users (Admin): /api/admin/users, /api/admin/users/[id]
* Courses (Public/Student): /api/courses, /api/courses/[id]
* Courses (Admin): /api/admin/courses, /api/admin/courses/[id]
* Lessons (Admin): /api/admin/courses/[courseId]/lessons, /api/admin/lessons/[lessonId]
* LLM: /api/llm/chat, /api/llm/summarize
* Student Progress: /api/student/progress
6. اعتبارات غير وظيفية (للإشارة إليها في التوثيق):
* الأمان: تأمين الـ APIs، حماية مفاتيح LLM.
* قابلية التوسع: تصميم قاعدة البيانات والـ APIs مع الأخذ في الاعتبار النمو المستقبلي.
* تجربة المستخدم: واجهات سهلة الاستخدام وبديهية.