// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  ADMIN
  INSTRUCTOR
  CONTENT_CREATOR
  MENTOR
  COMMUNITY_MANAGER
  QUALITY_ASSURANCE
  ANALYTICS_SPECIALIST
  SUPPORT_SPECIALIST
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum InteractionType {
  QUESTION_ANSWER
  TEXT_SUMMARY
  WRITING_ASSISTANCE
  QUIZ_GENERATION
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  ESSAY
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  name            String
  password        String?  // null for OAuth users
  role            UserRole @default(STUDENT)
  isActive        Boolean  @default(true)
  avatar          String?  // profile image URL

  // Additional profile fields
  phone           String?
  location        String?
  bio             String?  @db.Text
  website         String?
  birthDate       DateTime?
  occupation      String?

  // OAuth fields
  emailVerified   DateTime?
  image           String?

  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  accounts        Account[]
  sessions        Session[]
  authoredCourses Course[]           @relation("CourseAuthor")
  enrollments     Enrollment[]
  llmInteractions LLMInteractionLog[]
  quizAttempts    QuizAttempt[]
  settings        UserSettings?
  lessonProgress  LessonProgress[]
  apiKeys         UserApiKey?

  // Holacracy Relations
  roleAssignments RoleAssignment[]
  circleMembers   CircleMember[]
  proposedDecisions Decision[]
  objections      Objection[]

  // Notifications Relations
  receivedNotifications Notification[] @relation("UserNotifications")
  sentNotifications     Notification[] @relation("SentNotifications")
  notificationPreferences NotificationPreference? @relation("NotificationPreferences")

  // Analytics Relations
  analyticsEvents   AnalyticsEvent[] @relation("UserAnalytics")
  dailyActivities   UserActivity[]   @relation("UserDailyActivity")

  // Distributed Platform Relations
  nodePartnerships  NodePartner[]
  nodeSubscriptions NodeSubscription[]

  // Content Management Relations
  contentReviews    ContentReview[]
  localContentReviews LocalContentReview[]
  translations      Translation[]

  @@map("users")
}

model Course {
  id          String      @id @default(cuid())
  title       String
  description String?
  thumbnail   String?     // cover image URL
  isPublished Boolean     @default(false)
  level       CourseLevel @default(BEGINNER)
  duration    Int?        // duration in minutes

  // Author relation
  authorId    String
  author      User        @relation("CourseAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  lessons     Lesson[]
  enrollments Enrollment[]
  categories  CourseCategory[]

  @@map("courses")
}

model Lesson {
  id          String  @id @default(cuid())
  title       String
  content     Json    // lesson content (text, images, videos)
  order       Int     // lesson order in course
  duration    Int?    // estimated reading time in minutes
  isPublished Boolean @default(false)

  // Course relation
  courseId    String
  course      Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  llmInteractions LLMInteractionLog[]
  quizzes         Quiz[]
  progress        LessonProgress[]

  @@unique([courseId, order]) // unique order per course
  @@map("lessons")
}

model Enrollment {
  id           String    @id @default(cuid())
  progress     Float     @default(0) // progress percentage (0-100)
  isCompleted  Boolean   @default(false)
  completedAt  DateTime?
  lastAccessed DateTime?

  // User and Course relations
  userId       String
  courseId     String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // Timestamps
  enrolledAt   DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([userId, courseId]) // one user per course
  @@map("enrollments")
}

model LessonProgress {
  id          String    @id @default(cuid())
  completed   Boolean   @default(false)
  completedAt DateTime?
  timeSpent   Int?      // time spent in seconds

  // User and Lesson relations
  userId      String
  lessonId    String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, lessonId])
  @@map("lesson_progress")
}

model UserSettings {
  id        String   @id @default(cuid())
  userId    String   @unique
  settings  Json     // JSON object containing all user settings

  // User relation
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_settings")
}

model UserApiKey {
  id        String   @id @default(cuid())
  userId    String   @unique
  geminiKey String?  // Encrypted Gemini API key
  openaiKey String?  // Encrypted OpenAI API key (for future use)
  isActive  Boolean  @default(true)

  // User relation
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_api_keys")
}

model LLMInteractionLog {
  id           String          @id @default(cuid())
  type         InteractionType
  prompt       String          // input text
  response     String          // LLM response
  model        String          // LLM model used
  tokens       Int?            // tokens used
  cost         Float?          // cost in USD
  responseTime Int?            // response time in milliseconds

  // User relation
  userId       String
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Optional lesson context
  lessonId     String?
  lesson       Lesson?         @relation(fields: [lessonId], references: [id], onDelete: SetNull)

  // Timestamps
  createdAt    DateTime        @default(now())

  @@map("llm_interaction_logs")
}

// Quiz and Assessment Models
model Quiz {
  id          String  @id @default(cuid())
  title       String
  description String?
  timeLimit   Int?    // time limit in minutes
  isPublished Boolean @default(false)

  // Lesson relation
  lessonId    String
  lesson      Lesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  questions   Question[]
  attempts    QuizAttempt[]

  @@map("quizzes")
}

model Question {
  id       String       @id @default(cuid())
  text     String       // question text
  type     QuestionType
  order    Int          // question order in quiz
  points   Int          @default(1) // points for question

  // Quiz relation
  quizId   String
  quiz     Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  options   AnswerOption[]
  answers   StudentAnswer[]

  @@unique([quizId, order])
  @@map("questions")
}

model AnswerOption {
  id        String  @id @default(cuid())
  text      String  // option text
  isCorrect Boolean @default(false)
  order     Int     // option order

  // Question relation
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  // Relations
  studentAnswers StudentAnswer[]

  @@unique([questionId, order])
  @@map("answer_options")
}

model QuizAttempt {
  id          String    @id @default(cuid())
  score       Float?    // final score
  maxScore    Float     // maximum possible score
  isCompleted Boolean   @default(false)
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  timeSpent   Int?      // time spent in seconds

  // User and Quiz relations
  userId      String
  quizId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz        Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)

  // Relations
  answers     StudentAnswer[]

  @@map("quiz_attempts")
}

model StudentAnswer {
  id         String  @id @default(cuid())
  textAnswer String? // for text answers
  isCorrect  Boolean?
  points     Float   @default(0)

  // Relations
  attemptId        String
  questionId       String
  selectedOptionId String?

  attempt        QuizAttempt   @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question       Question      @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption AnswerOption? @relation(fields: [selectedOptionId], references: [id], onDelete: SetNull)

  // Timestamps
  answeredAt DateTime @default(now())

  @@unique([attemptId, questionId])
  @@map("student_answers")
}

// Additional Models
model CourseCategory {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  color       String? // category color for UI

  // Relations
  courses     Course[]

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("course_categories")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Holacracy System Models
model Circle {
  id          String   @id @default(cuid())
  name        String
  purpose     String   @db.Text
  domain      String?  @db.Text
  parentId    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  parent   Circle?  @relation("CircleHierarchy", fields: [parentId], references: [id])
  children Circle[] @relation("CircleHierarchy")
  roles    Role[]
  members  CircleMember[]
  decisions Decision[]

  @@map("circles")
}

model Role {
  id          String   @id @default(cuid())
  name        String
  purpose     String   @db.Text
  domain      String?  @db.Text
  circleId    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  circle      Circle       @relation(fields: [circleId], references: [id], onDelete: Cascade)
  assignments RoleAssignment[]
  accountabilities Accountability[]

  @@map("roles")
}

model RoleAssignment {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  startDate DateTime @default(now())
  endDate   DateTime?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("role_assignments")
}

model Accountability {
  id          String   @id @default(cuid())
  description String   @db.Text
  roleId      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@map("accountabilities")
}

model CircleMember {
  id       String @id @default(cuid())
  userId   String
  circleId String
  joinedAt DateTime @default(now())
  isActive Boolean  @default(true)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  circle Circle @relation(fields: [circleId], references: [id], onDelete: Cascade)

  @@unique([userId, circleId])
  @@map("circle_members")
}

model Decision {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  proposerId  String
  circleId    String?
  status      DecisionStatus @default(PROPOSED)
  decidedAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  proposer User    @relation(fields: [proposerId], references: [id])
  circle   Circle? @relation(fields: [circleId], references: [id])
  objections Objection[]

  @@map("decisions")
}

model Objection {
  id         String   @id @default(cuid())
  decisionId String
  userId     String
  reason     String   @db.Text
  isResolved Boolean  @default(false)
  createdAt  DateTime @default(now())
  resolvedAt DateTime?

  decision Decision @relation(fields: [decisionId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id])

  @@map("objections")
}

enum DecisionStatus {
  PROPOSED
  OBJECTED
  APPROVED
  IMPLEMENTED
  REJECTED
}

// أنواع الإشعارات المختلفة
enum NotificationType {
  COURSE_ENROLLMENT     // التسجيل في دورة جديدة
  LESSON_COMPLETED      // إكمال درس
  COURSE_COMPLETED      // إكمال دورة كاملة
  NEW_COURSE_AVAILABLE  // دورة جديدة متاحة
  ASSIGNMENT_DUE        // موعد تسليم مهمة
  QUIZ_AVAILABLE        // اختبار متاح
  QUIZ_RESULT           // نتيجة اختبار
  SYSTEM_ANNOUNCEMENT   // إعلان من النظام
  ROLE_ASSIGNMENT       // تعيين دور جديد
  DECISION_PROPOSED     // قرار مقترح في الهولاكراسي
  MESSAGE_RECEIVED      // رسالة جديدة
  ACHIEVEMENT_UNLOCKED  // إنجاز جديد
}

// حالة الإشعار
enum NotificationStatus {
  UNREAD    // غير مقروء
  READ      // مقروء
  ARCHIVED  // مؤرشف
}

// أولوية الإشعار
enum NotificationPriority {
  LOW       // منخفضة
  MEDIUM    // متوسطة
  HIGH      // عالية
  URGENT    // عاجلة
}

// نموذج الإشعارات الأساسي
model Notification {
  id          String               @id @default(cuid())
  title       String               // عنوان الإشعار
  message     String               @db.Text // محتوى الإشعار
  type        NotificationType     // نوع الإشعار
  status      NotificationStatus   @default(UNREAD) // حالة القراءة
  priority    NotificationPriority @default(MEDIUM) // أولوية الإشعار

  // بيانات إضافية (JSON) - مثل روابط، معرفات، إلخ
  metadata    Json?                // بيانات إضافية مرنة

  // الرابط المرتبط بالإشعار (اختياري)
  actionUrl   String?              // رابط الإجراء

  // معرف المستخدم المستلم
  userId      String
  user        User                 @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)

  // معرف المرسل (اختياري - قد يكون النظام)
  senderId    String?
  sender      User?                @relation("SentNotifications", fields: [senderId], references: [id], onDelete: SetNull)

  // تواريخ مهمة
  createdAt   DateTime             @default(now()) // تاريخ الإنشاء
  readAt      DateTime?            // تاريخ القراءة
  expiresAt   DateTime?            // تاريخ انتهاء الصلاحية

  @@map("notifications")
}

// قوالب الإشعارات لإعادة الاستخدام
model NotificationTemplate {
  id          String               @id @default(cuid())
  name        String               @unique // اسم القالب
  title       String               // عنوان القالب
  message     String               @db.Text // محتوى القالب (يدعم المتغيرات)
  type        NotificationType     // نوع الإشعار
  priority    NotificationPriority @default(MEDIUM)

  // إعدادات القالب
  isActive    Boolean              @default(true) // هل القالب نشط
  variables   Json?                // المتغيرات المطلوبة في القالب

  // قالب البريد الإلكتروني (اختياري)
  emailSubject String?             // موضوع البريد الإلكتروني
  emailBody    String?             @db.Text // محتوى البريد الإلكتروني (HTML)

  // تواريخ
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  @@map("notification_templates")
}

// تفضيلات الإشعارات للمستخدمين
model NotificationPreference {
  id                    String               @id @default(cuid())
  userId                String               @unique
  user                  User                 @relation("NotificationPreferences", fields: [userId], references: [id], onDelete: Cascade)

  // إعدادات عامة
  enableInApp           Boolean              @default(true)  // إشعارات داخل التطبيق
  enableEmail           Boolean              @default(true)  // إشعارات البريد الإلكتروني
  enablePush            Boolean              @default(false) // إشعارات الدفع (للمستقبل)

  // إعدادات حسب نوع الإشعار
  courseNotifications   Boolean              @default(true)  // إشعارات الدورات
  quizNotifications     Boolean              @default(true)  // إشعارات الاختبارات
  systemNotifications  Boolean              @default(true)  // إشعارات النظام
  roleNotifications     Boolean              @default(true)  // إشعارات الأدوار
  achievementNotifications Boolean           @default(true)  // إشعارات الإنجازات

  // إعدادات التوقيت
  quietHoursStart       String?              // بداية ساعات الهدوء (HH:mm)
  quietHoursEnd         String?              // نهاية ساعات الهدوء (HH:mm)
  weeklyDigest          Boolean              @default(false) // ملخص أسبوعي

  // تواريخ
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt

  @@map("notification_preferences")
}

// أحداث التحليلات لتتبع نشاط المستخدمين
model AnalyticsEvent {
  id          String   @id @default(cuid())
  eventName   String   // اسم الحدث (مثل: page_view, course_start, lesson_complete)
  eventType   String   // نوع الحدث (مثل: user_action, system_event)

  // معرف المستخدم (اختياري للأحداث العامة)
  userId      String?
  user        User?    @relation("UserAnalytics", fields: [userId], references: [id], onDelete: SetNull)

  // بيانات الحدث (JSON مرن)
  properties  Json?    // خصائص الحدث (مثل: course_id, lesson_id, duration, etc.)

  // معلومات الجلسة
  sessionId   String?  // معرف الجلسة
  userAgent   String?  // معلومات المتصفح
  ipAddress   String?  // عنوان IP (مشفر للخصوصية)

  // معلومات الصفحة
  pageUrl     String?  // رابط الصفحة
  referrer    String?  // المصدر

  // تاريخ الحدث
  timestamp   DateTime @default(now())

  @@index([eventName, timestamp]) // فهرس لتحسين الاستعلامات
  @@index([userId, timestamp])    // فهرس للمستخدم والوقت
  @@map("analytics_events")
}

// نشاط المستخدمين اليومي (ملخص)
model UserActivity {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation("UserDailyActivity", fields: [userId], references: [id], onDelete: Cascade)

  // التاريخ (يوم واحد فقط)
  date            DateTime @db.Date // تاريخ النشاط (بدون وقت)

  // إحصائيات النشاط
  sessionsCount   Int      @default(0) // عدد الجلسات
  totalTimeSpent  Int      @default(0) // إجمالي الوقت بالدقائق
  pagesVisited    Int      @default(0) // عدد الصفحات المزارة
  lessonsViewed   Int      @default(0) // عدد الدروس المشاهدة
  quizzesTaken    Int      @default(0) // عدد الاختبارات المأخوذة

  // تفاعل مع المساعد الذكي
  aiInteractions  Int      @default(0) // عدد التفاعلات مع AI

  // آخر نشاط
  lastActiveAt    DateTime @default(now())

  // تواريخ
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([userId, date]) // مستخدم واحد لكل يوم
  @@map("user_activities")
}

// مقاييس النظام العامة
model SystemMetrics {
  id              String   @id @default(cuid())

  // التاريخ
  date            DateTime @db.Date @unique // تاريخ المقاييس

  // إحصائيات المستخدمين
  totalUsers      Int      @default(0) // إجمالي المستخدمين
  activeUsers     Int      @default(0) // المستخدمين النشطين
  newUsers        Int      @default(0) // مستخدمين جدد

  // إحصائيات الدورات
  totalCourses    Int      @default(0) // إجمالي الدورات
  activeCourses   Int      @default(0) // الدورات النشطة
  newEnrollments  Int      @default(0) // تسجيلات جديدة

  // إحصائيات التفاعل
  totalLessons    Int      @default(0) // إجمالي الدروس
  lessonsCompleted Int     @default(0) // الدروس المكتملة
  quizzesCompleted Int     @default(0) // الاختبارات المكتملة

  // إحصائيات المساعد الذكي
  aiInteractions  Int      @default(0) // تفاعلات AI
  aiTokensUsed    Int      @default(0) // الرموز المستخدمة

  // أداء النظام
  avgResponseTime Float?   // متوسط وقت الاستجابة (بالميلي ثانية)
  errorRate       Float?   // معدل الأخطاء (نسبة مئوية)

  // تواريخ
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("system_metrics")
}

// Distributed Platform System Models
enum NodeStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
  MAINTENANCE
}

enum PartnerRole {
  OWNER
  MANAGER
  INSTRUCTOR
  SUPPORT
  CONTENT_CREATOR
}

enum RevenueType {
  SUBSCRIPTION
  COURSE
  CONSULTING
  WORKSHOP
  CERTIFICATION
  PARTNERSHIP
}

enum ContentTier {
  FREE
  PREMIUM
  ENTERPRISE
}

enum SubscriptionType {
  BASIC
  ADVANCED
  PREMIUM
  ENTERPRISE
}

enum GlobalContentType {
  ACADEMIC_COURSE
  PROFESSIONAL_COURSE
  LESSON
  QUIZ
  RESOURCE
  TEMPLATE
}

enum ContentCategory {
  MATHEMATICS
  SCIENCES
  LANGUAGES
  ISLAMIC_STUDIES
  TECHNOLOGY
  BUSINESS
  ARTS
  LIFE_SKILLS
}

enum ContentLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum AgeGroup {
  CHILDREN_6_12
  TEENS_13_17
  ADULTS_18_PLUS
  SENIORS_50_PLUS
}

enum ReviewStatus {
  PENDING
  APPROVED
  NEEDS_REVISION
  REJECTED
}

enum TranslationStatus {
  NOT_STARTED
  IN_PROGRESS
  REVIEW
  COMPLETED
  NEEDS_REVISION
}

model LocalNode {
  id            String     @id @default(cuid())
  name          String
  slug          String     @unique
  region        String
  country       String
  language      String     @default("ar")
  currency      String     @default("USD")
  timezone      String     @default("UTC")
  status        NodeStatus @default(PENDING)
  databaseUrl   String?    // URL for local database
  apiEndpoint   String?    // API endpoint for the node
  settings      Json       @default("{}")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // Relations
  partners      NodePartner[]
  revenues      NodeRevenue[]
  localContent  LocalContent[]
  nodeSettings  NodeSetting[]
  subscriptions NodeSubscription[]

  @@map("local_nodes")
}

model NodePartner {
  id                String      @id @default(cuid())
  nodeId            String
  userId            String
  role              PartnerRole
  revenueShare      Decimal     @default(0.00) @db.Decimal(5,2)
  status            NodeStatus  @default(PENDING)
  contractStartDate DateTime?
  contractEndDate   DateTime?
  contractData      Json        @default("{}")
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  node              LocalNode   @relation(fields: [nodeId], references: [id], onDelete: Cascade)
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([nodeId, userId])
  @@map("node_partners")
}

model NodeRevenue {
  id              String      @id @default(cuid())
  nodeId          String
  revenueType     RevenueType
  amount          Decimal     @db.Decimal(10,2)
  currency        String
  platformFee     Decimal     @db.Decimal(10,2)
  netAmount       Decimal     @db.Decimal(10,2)
  transactionDate DateTime
  description     String?
  metadata        Json        @default("{}")
  syncedToGlobal  Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  node            LocalNode   @relation(fields: [nodeId], references: [id], onDelete: Cascade)

  @@map("node_revenues")
}

model NodeSubscription {
  id              String           @id @default(cuid())
  nodeId          String
  userId          String
  subscriptionType SubscriptionType
  tier            ContentTier
  amount          Decimal          @db.Decimal(10,2)
  currency        String           @default("USD")
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean          @default(true)
  autoRenew       Boolean          @default(true)
  metadata        Json             @default("{}")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relations
  node            LocalNode        @relation(fields: [nodeId], references: [id], onDelete: Cascade)
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([nodeId, userId])
  @@map("node_subscriptions")
}

model LocalContent {
  id                String         @id @default(cuid())
  nodeId            String
  globalContentId   String?        // Reference to global content
  title             String
  description       String?        @db.Text
  contentType       String         // course, lesson, quiz, resource
  contentData       Json
  language          String
  isCustomized      Boolean        @default(false)
  customizationData Json           @default("{}")
  status            String         @default("draft") // draft, published, archived
  version           String         @default("1.0")
  translationStatus TranslationStatus @default(NOT_STARTED)
  localizedBy       String?        // معرف المترجم/المحرر المحلي
  reviewedBy        String?        // معرف المراجع
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // Relations
  node              LocalNode      @relation(fields: [nodeId], references: [id], onDelete: Cascade)
  globalContent     GlobalContent? @relation(fields: [globalContentId], references: [id], onDelete: SetNull)
  translations      Translation[]
  localReviews      LocalContentReview[]

  @@map("local_content")
}

model NodeSetting {
  id           String    @id @default(cuid())
  nodeId       String
  settingKey   String
  settingValue String    @db.Text
  settingType  String    @default("string") // string, number, boolean, json
  isPublic     Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  node         LocalNode @relation(fields: [nodeId], references: [id], onDelete: Cascade)

  @@unique([nodeId, settingKey])
  @@map("node_settings")
}

// Global Content Management System
model GlobalContent {
  id                  String              @id @default(cuid())
  title               String
  description         String?             @db.Text
  type                GlobalContentType
  category            ContentCategory
  level               ContentLevel
  ageGroup            AgeGroup
  tier                ContentTier
  estimatedDuration   Int?                // بالدقائق
  prerequisites       Json                @default("[]") // قائمة المتطلبات المسبقة
  learningObjectives  Json                @default("[]") // أهداف التعلم
  contentData         Json                // البيانات الأساسية للمحتوى
  metadata            Json                @default("{}")  // معلومات إضافية
  version             String              @default("1.0.0")
  isPublished         Boolean             @default(false)
  publishedAt         DateTime?
  reviewStatus        ReviewStatus        @default(PENDING)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  // Relations
  localizations       LocalContent[]
  reviews             ContentReview[]
  versions            ContentVersion[]
  distributions       ContentDistribution[]

  @@map("global_content")
}

model ContentVersion {
  id                String              @id @default(cuid())
  globalContentId   String
  version           String              // مثل "1.2.3"
  changeType        String              // major, minor, patch
  changes           Json                @default("[]") // قائمة التغييرات
  contentData       Json                // بيانات هذا الإصدار
  isStable          Boolean             @default(false)
  publishedAt       DateTime            @default(now())
  createdAt         DateTime            @default(now())

  // Relations
  globalContent     GlobalContent       @relation(fields: [globalContentId], references: [id], onDelete: Cascade)

  @@map("content_versions")
}

model ContentReview {
  id                String              @id @default(cuid())
  globalContentId   String
  reviewerId        String
  reviewType        String              // technical, educational, cultural
  score             Int                 // 1-10
  feedback          String              @db.Text
  recommendations   Json                @default("[]")
  status            ReviewStatus
  reviewedAt        DateTime            @default(now())

  // Relations
  globalContent     GlobalContent       @relation(fields: [globalContentId], references: [id], onDelete: Cascade)
  reviewer          User                @relation(fields: [reviewerId], references: [id], onDelete: Cascade)

  @@map("content_reviews")
}

model ContentDistribution {
  id                String              @id @default(cuid())
  globalContentId   String
  targetNodes       Json                @default("[]") // قائمة العقد المستهدفة
  distributionType  String              // push_all, selective, on_demand
  status            String              @default("pending") // pending, in_progress, completed, failed
  startedAt         DateTime            @default(now())
  completedAt       DateTime?
  successfulNodes   Int                 @default(0)
  failedNodes       Int                 @default(0)
  errors            Json                @default("[]") // قائمة الأخطاء
  metadata          Json                @default("{}")

  // Relations
  globalContent     GlobalContent       @relation(fields: [globalContentId], references: [id], onDelete: Cascade)

  @@map("content_distributions")
}

// Translation Management System
model Translation {
  id                String              @id @default(cuid())
  localContentId    String
  translatorId      String
  sourceLanguage    String
  targetLanguage    String
  sourceText        String              @db.Text
  translatedText    String              @db.Text
  translationType   String              // automatic, human, hybrid
  quality           Json                @default("{}") // accuracy, fluency, cultural_fit
  status            TranslationStatus   @default(NOT_STARTED)
  feedback          String?             @db.Text
  completedAt       DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  localContent      LocalContent        @relation(fields: [localContentId], references: [id], onDelete: Cascade)
  translator        User                @relation(fields: [translatorId], references: [id], onDelete: Cascade)

  @@map("translations")
}

model LocalContentReview {
  id                String              @id @default(cuid())
  localContentId    String
  reviewerId        String
  languageQuality   Int                 // 1-10
  culturalRelevance Int                 // 1-10
  educationalValue  Int                 // 1-10
  technicalAccuracy Int                 // 1-10
  overallScore      Int                 // 1-10
  feedback          String              @db.Text
  recommendations   Json                @default("[]")
  status            ReviewStatus        @default(PENDING)
  reviewedAt        DateTime            @default(now())

  // Relations
  localContent      LocalContent        @relation(fields: [localContentId], references: [id], onDelete: Cascade)
  reviewer          User                @relation(fields: [reviewerId], references: [id], onDelete: Cascade)

  @@map("local_content_reviews")
}

// Content Analytics and Performance
model ContentAnalytics {
  id                String              @id @default(cuid())
  contentId         String              // يمكن أن يكون global أو local
  contentType       String              // global, local
  nodeId            String?             // للمحتوى المحلي
  viewCount         Int                 @default(0)
  completionCount   Int                 @default(0)
  averageRating     Decimal             @default(0) @db.Decimal(3,2)
  totalRatings      Int                 @default(0)
  averageTime       Int                 @default(0) // متوسط الوقت المستغرق بالدقائق
  bounceRate        Decimal             @default(0) @db.Decimal(5,2) // معدل الارتداد
  engagementScore   Decimal             @default(0) @db.Decimal(5,2)
  lastUpdated       DateTime            @default(now())
  createdAt         DateTime            @default(now())

  @@unique([contentId, contentType, nodeId])
  @@map("content_analytics")
}