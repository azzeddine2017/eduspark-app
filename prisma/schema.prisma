// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  ADMIN
  INSTRUCTOR
  CONTENT_CREATOR
  MENTOR
  COMMUNITY_MANAGER
  QUALITY_ASSURANCE
  ANALYTICS_SPECIALIST
  SUPPORT_SPECIALIST
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum InteractionType {
  QUESTION_ANSWER
  TEXT_SUMMARY
  WRITING_ASSISTANCE
  QUIZ_GENERATION
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  ESSAY
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  name            String
  password        String?  // null for OAuth users
  role            UserRole @default(STUDENT)
  isActive        Boolean  @default(true)
  avatar          String?  // profile image URL

  // Additional profile fields
  phone           String?
  location        String?
  bio             String?  @db.Text
  website         String?
  birthDate       DateTime?
  occupation      String?

  // OAuth fields
  emailVerified   DateTime?
  image           String?

  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  accounts        Account[]
  sessions        Session[]
  authoredCourses Course[]           @relation("CourseAuthor")
  enrollments     Enrollment[]
  llmInteractions LLMInteractionLog[]
  quizAttempts    QuizAttempt[]
  settings        UserSettings?
  lessonProgress  LessonProgress[]

  // Holacracy Relations
  roleAssignments RoleAssignment[]
  circleMembers   CircleMember[]
  proposedDecisions Decision[]
  objections      Objection[]

  @@map("users")
}

model Course {
  id          String      @id @default(cuid())
  title       String
  description String?
  thumbnail   String?     // cover image URL
  isPublished Boolean     @default(false)
  level       CourseLevel @default(BEGINNER)
  duration    Int?        // duration in minutes

  // Author relation
  authorId    String
  author      User        @relation("CourseAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  lessons     Lesson[]
  enrollments Enrollment[]
  categories  CourseCategory[]

  @@map("courses")
}

model Lesson {
  id          String  @id @default(cuid())
  title       String
  content     Json    // lesson content (text, images, videos)
  order       Int     // lesson order in course
  duration    Int?    // estimated reading time in minutes
  isPublished Boolean @default(false)

  // Course relation
  courseId    String
  course      Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  llmInteractions LLMInteractionLog[]
  quizzes         Quiz[]
  progress        LessonProgress[]

  @@unique([courseId, order]) // unique order per course
  @@map("lessons")
}

model Enrollment {
  id           String    @id @default(cuid())
  progress     Float     @default(0) // progress percentage (0-100)
  isCompleted  Boolean   @default(false)
  completedAt  DateTime?
  lastAccessed DateTime?

  // User and Course relations
  userId       String
  courseId     String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // Timestamps
  enrolledAt   DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([userId, courseId]) // one user per course
  @@map("enrollments")
}

model LessonProgress {
  id          String    @id @default(cuid())
  completed   Boolean   @default(false)
  completedAt DateTime?
  timeSpent   Int?      // time spent in seconds

  // User and Lesson relations
  userId      String
  lessonId    String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, lessonId])
  @@map("lesson_progress")
}

model UserSettings {
  id        String   @id @default(cuid())
  userId    String   @unique
  settings  Json     // JSON object containing all user settings

  // User relation
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_settings")
}

model LLMInteractionLog {
  id           String          @id @default(cuid())
  type         InteractionType
  prompt       String          // input text
  response     String          // LLM response
  model        String          // LLM model used
  tokens       Int?            // tokens used
  cost         Float?          // cost in USD
  responseTime Int?            // response time in milliseconds

  // User relation
  userId       String
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Optional lesson context
  lessonId     String?
  lesson       Lesson?         @relation(fields: [lessonId], references: [id], onDelete: SetNull)

  // Timestamps
  createdAt    DateTime        @default(now())

  @@map("llm_interaction_logs")
}

// Quiz and Assessment Models
model Quiz {
  id          String  @id @default(cuid())
  title       String
  description String?
  timeLimit   Int?    // time limit in minutes
  isPublished Boolean @default(false)

  // Lesson relation
  lessonId    String
  lesson      Lesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  questions   Question[]
  attempts    QuizAttempt[]

  @@map("quizzes")
}

model Question {
  id       String       @id @default(cuid())
  text     String       // question text
  type     QuestionType
  order    Int          // question order in quiz
  points   Int          @default(1) // points for question

  // Quiz relation
  quizId   String
  quiz     Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  options   AnswerOption[]
  answers   StudentAnswer[]

  @@unique([quizId, order])
  @@map("questions")
}

model AnswerOption {
  id        String  @id @default(cuid())
  text      String  // option text
  isCorrect Boolean @default(false)
  order     Int     // option order

  // Question relation
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  // Relations
  studentAnswers StudentAnswer[]

  @@unique([questionId, order])
  @@map("answer_options")
}

model QuizAttempt {
  id          String    @id @default(cuid())
  score       Float?    // final score
  maxScore    Float     // maximum possible score
  isCompleted Boolean   @default(false)
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  timeSpent   Int?      // time spent in seconds

  // User and Quiz relations
  userId      String
  quizId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz        Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)

  // Relations
  answers     StudentAnswer[]

  @@map("quiz_attempts")
}

model StudentAnswer {
  id         String  @id @default(cuid())
  textAnswer String? // for text answers
  isCorrect  Boolean?
  points     Float   @default(0)

  // Relations
  attemptId        String
  questionId       String
  selectedOptionId String?

  attempt        QuizAttempt   @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question       Question      @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption AnswerOption? @relation(fields: [selectedOptionId], references: [id], onDelete: SetNull)

  // Timestamps
  answeredAt DateTime @default(now())

  @@unique([attemptId, questionId])
  @@map("student_answers")
}

// Additional Models
model CourseCategory {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  color       String? // category color for UI

  // Relations
  courses     Course[]

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("course_categories")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Holacracy System Models
model Circle {
  id          String   @id @default(cuid())
  name        String
  purpose     String   @db.Text
  domain      String?  @db.Text
  parentId    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  parent   Circle?  @relation("CircleHierarchy", fields: [parentId], references: [id])
  children Circle[] @relation("CircleHierarchy")
  roles    Role[]
  members  CircleMember[]
  decisions Decision[]

  @@map("circles")
}

model Role {
  id          String   @id @default(cuid())
  name        String
  purpose     String   @db.Text
  domain      String?  @db.Text
  circleId    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  circle      Circle       @relation(fields: [circleId], references: [id], onDelete: Cascade)
  assignments RoleAssignment[]
  accountabilities Accountability[]

  @@map("roles")
}

model RoleAssignment {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  startDate DateTime @default(now())
  endDate   DateTime?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("role_assignments")
}

model Accountability {
  id          String   @id @default(cuid())
  description String   @db.Text
  roleId      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@map("accountabilities")
}

model CircleMember {
  id       String @id @default(cuid())
  userId   String
  circleId String
  joinedAt DateTime @default(now())
  isActive Boolean  @default(true)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  circle Circle @relation(fields: [circleId], references: [id], onDelete: Cascade)

  @@unique([userId, circleId])
  @@map("circle_members")
}

model Decision {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  proposerId  String
  circleId    String?
  status      DecisionStatus @default(PROPOSED)
  decidedAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  proposer User    @relation(fields: [proposerId], references: [id])
  circle   Circle? @relation(fields: [circleId], references: [id])
  objections Objection[]

  @@map("decisions")
}

model Objection {
  id         String   @id @default(cuid())
  decisionId String
  userId     String
  reason     String   @db.Text
  isResolved Boolean  @default(false)
  createdAt  DateTime @default(now())
  resolvedAt DateTime?

  decision Decision @relation(fields: [decisionId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id])

  @@map("objections")
}

enum DecisionStatus {
  PROPOSED
  OBJECTED
  APPROVED
  IMPLEMENTED
  REJECTED
}